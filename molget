#!/bin/bash
# Original work by Jan Jensen (https://github.com/jensengroup/molget).
# Rewritten by Felipe Schneider.
#
#? molget 0.2
#?
#? Molget: bash script to get coordinates from chemical name using Cactus.
#?
#? Usage: molget chemical_name [chemical_name...]
#?
#?   -h  show this message
#?   -v  show version
#?
#? Examples:
#?
#?   ./molget methane
#?   ./molget hexacyanoiron
#?   ./molget water thf dmso dmf
#?   ./molget "propylene carbonate"
#?   (remember to "chmod 755 molget")

while getopts ":hv" opt "$@"
  do
    case $opt in
      h)  # Help message.
        grep "^#?" "$0" | cut -c 4-
        exit 0
        ;;
      v)  # Version message.
        grep "^#? molget" "$0" | cut -c 4-
        exit 0
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done

# Recover $@ for posterior use.
shift $((OPTIND-1))

for molecule in "$@"
  do
    echo -n "$molecule"

    # Some preferences are preset, such as file types and options.
    cactus_repr="sdf"
    ob_inp_type="sdf"
    ob_out_type="xyz"
    ob_ext_opts="-c"

    # A URL is then generated.
    url="https://cactus.nci.nih.gov/chemical/structure/${molecule}/${cactus_repr}"
    # Spaces in the URL should be escaped.
    url=${url// /%20}

    # It is also wise to translate spaces in filenames to underscores.
    molecule_wo_spaces=${molecule// /_}

    # After, file names are generated.
    ob_inp_file="${molecule_wo_spaces}.${ob_inp_type}"
    ob_out_file="${molecule_wo_spaces}.${ob_out_type}"

    # The data is downloaded and transformed.
    curl -# "$url" -o "$ob_inp_file" 2> /dev/null

    # Check for 404 error
    if grep -q "Page not found" "${ob_inp_file}"; then
        echo " FAILED"
        rm "${ob_inp_file}"
        continue
    fi

    obabel -i "$ob_inp_type" "$ob_inp_file" -o "$ob_out_type" -O "$ob_out_file" $ob_ext_opts 2> /dev/null
    echo " SUCCESS"
  done
